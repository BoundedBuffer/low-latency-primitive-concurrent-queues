{"name":"Low Latency Primitive Concurrent Queues","tagline":"Low latency, lock free, primitive bounded blocking queues backed by an primitive arrays such as an int[]. These classes mimic the interface of BlockingQueue, they work with primitive rather than Objects so are unable to actually implement the BlockingQueue. They take advantage of the Unsafe.putOrdered<X>, which allows the creation of non-blocking code with guaranteed writes. These writes will not be re-orderd by instruction reordering. Under the covers they use a faster store-store barrier, rather than the the slower store-load barrier, which is used when doing a volatile write. One of the trade offs with this improved performance, is to maintain thread safety, we are limited to using just two threads, a single producer thread and a single consumer.","body":"### Welcome to Bounded Buffer.\r\n\r\nAn example of how to use on of our low latency bounded queues.\r\n\r\n```\r\n// todo\r\n```\r\n\r\n### JavaDoc\r\nHaving trouble ? Check out the documentation at : http://boundedbuffer.github.io/low-latency-primitive-concurrent-queues/apidocs/\r\n\r\n\r\n### Contributors\r\nContributors are extremely welcome, just fork this project, make your changes, and we'd be happy to review your pull-request.\r\n\r\n### Support or Contact\r\nHaving Problems ? Contact support@boundedbuffer.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}