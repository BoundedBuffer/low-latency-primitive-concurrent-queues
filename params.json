{"name":"Low-latency-primitive-concurrent-queues","tagline":"A low latency, lock free, primitive bounded blocking queue backed by an int[]. This class mimics the interface of BlockingQueue, however works with primitive ints rather than Objects, so is unable to actually implement the BlockingQueue.  Takes advantage of the Unsafe.putOrderedObject, which allows us to create non-blocking code with guaranteed writes. These writes will not be re-orderd by instruction reordering. Under the covers it uses the faster store-store barrier, rather than the the slower store-load barrier, which is used when doing a volatile write. One of the trade off with this improved performance is we are limited to a single producer, single consumer. ","body":"### Welcome to Bounded Buffer.\r\n\r\nAn example of how to use on of our low latency bounded queues.\r\n\r\n```\r\n// todo\r\n```\r\n\r\n### Contributors\r\nContributors are extremely welcome, just fork this project, make your changes, and we'd be happy to review your pull-request.\r\n\r\n### Support or Contact\r\nHaving trouble ? Check out the documentation at http://wwww.boundedbuffer.com or contact support@boundedbuffer.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}